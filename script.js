document.getElementById('cipherType').addEventListener('change', function() {
    const cipherType = this.value;
    const keyInput = document.getElementById('keyInput');
    const shiftInput = document.getElementById('shiftInput');
    const infoSection = document.getElementById('cipherInfo');

    if (cipherType === 'caesar') {
        keyInput.style.display = 'none';
        shiftInput.style.display = 'block';
        infoSection.innerHTML = `
            <h3>–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è</h3>
            <p>–ö–∞–∂–¥–∞—è –±—É–∫–≤–∞ —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ.</p>
            <p>–ü—Ä–∏–º–µ—Ä: –ü—Ä–∏ —Å–¥–≤–∏–≥–µ 3, –ê ‚Üí –ì, –ë ‚Üí –î –∏ —Ç.–¥.</p>
        `;
    } else if (cipherType === 'vigenere') {
        keyInput.style.display = 'block';
        shiftInput.style.display = 'none';
        infoSection.innerHTML = `
            <h3>–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞</h3>
            <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–¥–≤–∏–≥–∞ –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã.</p>
            <p>–ü—Ä–∏–º–µ—Ä: –ö–ª—é—á "KEY" ‚Üí –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.</p>
        `;
    } else if (cipherType === 'morse') {
        keyInput.style.display = 'none';
        shiftInput.style.display = 'none';
        infoSection.innerHTML = `
            <h3>–ö–æ–¥ –ú–æ—Ä–∑–µ</h3>
            <p>–ë—É–∫–≤—ã –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ (‚Ä¢) –∏ —Ç–∏—Ä–µ (‚àí).</p>
            <p>–ü—Ä–∏–º–µ—Ä: SOS ‚Üí ‚Ä¢‚Ä¢‚Ä¢ ‚àí‚àí‚àí ‚Ä¢‚Ä¢‚Ä¢</p>
        `;
    } else if (cipherType === 'atbash') {
        keyInput.style.display = 'none';
        shiftInput.style.display = 'none';
        infoSection.innerHTML = `
            <h3>–®–∏—Ñ—Ä –ê—Ç–±–∞—à</h3>
            <p>–ê–ª—Ñ–∞–≤–∏—Ç –∑–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è (–ê ‚Üí –Ø, –ë ‚Üí –Æ –∏ —Ç.–¥.).</p>
            <p>–ü—Ä–∏–º–µ—Ä: –ê–ë–í ‚Üí –Ø–Æ–≠</p>
        `;
    }
});

document.getElementById('encryptBtn').addEventListener('click', processText);
document.getElementById('decryptBtn').addEventListener('click', processText);

function processText(e) {
    const inputText = document.getElementById('inputText').value;
    const cipherType = document.getElementById('cipherType').value;
    const isEncrypt = e.target.id === 'encryptBtn';
    let outputText = '';

    if (cipherType === 'morse') {
        outputText = isEncrypt ? textToMorse(inputText) : morseToText(inputText);
    } else if (cipherType === 'caesar') {
        const shift = parseInt(document.getElementById('shift').value);
        outputText = isEncrypt ? caesarCipher(inputText, shift) : caesarCipher(inputText, -shift);
    } else if (cipherType === 'vigenere') {
        const key = document.getElementById('key').value;
        outputText = isEncrypt ? vigenereCipher(inputText, key) : vigenereDecipher(inputText, key);
    } else if (cipherType === 'atbash') {
        outputText = atbashCipher(inputText);
    }

    document.getElementById('outputText').value = outputText;
}

// –ö–æ–¥ –ú–æ—Ä–∑–µ (—Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
function textToMorse(text) {
    const morseCode = {
        '–ê': '.-', '–ë': '-...', '–í': '.--', '–ì': '--.', '–î': '-..', '–ï': '.', '–Å': '.',
        '–ñ': '...-', '–ó': '--..', '–ò': '..', '–ô': '.---', '–ö': '-.-', '–õ': '.-..',
        '–ú': '--', '–ù': '-.', '–û': '---', '–ü': '.--.', '–†': '.-.', '–°': '...', '–¢': '-',
        '–£': '..-', '–§': '..-.', '–•': '....', '–¶': '-.-.', '–ß': '---.', '–®': '----',
        '–©': '--.-', '–™': '--.--', '–´': '-.--', '–¨': '-..-', '–≠': '..-..', '–Æ': '..--',
        '–Ø': '.-.-',
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
        'Y': '-.--', 'Z': '--..',
        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-',
        '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',
        ' ': '/', ',': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-'
    };

    return text.toUpperCase().split('').map(char => morseCode[char] || char).join(' ');
}

function morseToText(morse) {
    const morseMap = {
        '.-': '–ê', '-...': '–ë', '.--': '–í', '--.': '–ì', '-..': '–î', '.': '–ï',
        '...-': '–ñ', '--..': '–ó', '..': '–ò', '.---': '–ô', '-.-': '–ö', '.-..': '–õ',
        '--': '–ú', '-.': '–ù', '---': '–û', '.--.': '–ü', '.-.': '–†', '...': '–°', '-': '–¢',
        '..-': '–£', '..-.': '–§', '....': '–•', '-.-.': '–¶', '---.': '–ß', '----': '–®',
        '--.-': '–©', '--.--': '–™', '-.--': '–´', '-..-': '–¨', '..-..': '–≠', '..--': '–Æ',
        '.-.-': '–Ø',
        '-----': '0', '.----': '1', '..---': '2', '...--': '3', '....-': '4',
        '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9',
        '/': ' ', '--..--': ',', '.-.-.-': '.', '..--..': '?', '-..-.': '/', '-....-': '-'
    };

    return morse.split(' ').map(code => morseMap[code] || code).join('');
}

// –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è (—Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
function caesarCipher(text, shift) {
    const rusUpper = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';
    const rusLower = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
    
    return text.split('').map(char => {
        if (rusUpper.includes(char)) {
            const index = (rusUpper.indexOf(char) + shift + 33) % 33;
            return rusUpper[index];
        } else if (rusLower.includes(char)) {
            const index = (rusLower.indexOf(char) + shift + 33) % 33;
            return rusLower[index];
        } else if (/[A-Z]/.test(char)) {
            const code = char.charCodeAt(0) - 65;
            return String.fromCharCode(((code + shift + 26) % 26) + 65);
        } else if (/[a-z]/.test(char)) {
            const code = char.charCodeAt(0) - 97;
            return String.fromCharCode(((code + shift + 26) % 26) + 97);
        }
        return char;
    }).join('');
}

// –®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞ (—Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
function vigenereCipher(text, key) {
    const rusAlphabet = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';
    key = key.toUpperCase().replace(/[^–ê-–Ø–Å]/g, '');
    let keyIndex = 0;
    
    return text.split('').map(char => {
        if (/[–ê-–Ø–Å]/.test(char)) {
            const shift = rusAlphabet.indexOf(key[keyIndex % key.length]);
            const index = (rusAlphabet.indexOf(char) + shift) % 33;
            keyIndex++;
            return rusAlphabet[index];
        } else if (/[–∞-—è—ë]/.test(char)) {
            const shift = rusAlphabet.indexOf(key[keyIndex % key.length]);
            const index = (rusAlphabet.indexOf(char.toUpperCase()) + shift) % 33;
            keyIndex++;
            return rusAlphabet[index].toLowerCase();
        } else if (/[A-Z]/.test(char)) {
            const shift = key.charCodeAt(keyIndex % key.length) - 1040;
            const code = char.charCodeAt(0) - 65;
            keyIndex++;
            return String.fromCharCode(((code + shift + 26) % 26) + 65);
        }
        return char;
    }).join('');
}

function vigenereDecipher(text, key) {
    const rusAlphabet = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';
    key = key.toUpperCase().replace(/[^–ê-–Ø–Å]/g, '');
    let keyIndex = 0;
    
    return text.split('').map(char => {
        if (/[–ê-–Ø–Å]/.test(char)) {
            const shift = rusAlphabet.indexOf(key[keyIndex % key.length]);
            const index = (rusAlphabet.indexOf(char) - shift + 33) % 33;
            keyIndex++;
            return rusAlphabet[index];
        } else if (/[–∞-—è—ë]/.test(char)) {
            const shift = rusAlphabet.indexOf(key[keyIndex % key.length]);
            const index = (rusAlphabet.indexOf(char.toUpperCase()) - shift + 33) % 33;
            keyIndex++;
            return rusAlphabet[index].toLowerCase();
        }
        return char;
    }).join('');
}

// –®–∏—Ñ—Ä –ê—Ç–±–∞—à (—Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
function atbashCipher(text) {
    const rusUpper = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';
    const rusLower = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
    const reversedUpper = rusUpper.split('').reverse().join('');
    const reversedLower = rusLower.split('').reverse().join('');
    
    return text.split('').map(char => {
        if (rusUpper.includes(char)) {
            return reversedUpper[rusUpper.indexOf(char)];
        } else if (rusLower.includes(char)) {
            return reversedLower[rusLower.indexOf(char)];
        } else if (/[A-Z]/.test(char)) {
            return String.fromCharCode(90 - (char.charCodeAt(0) - 65));
        } else if (/[a-z]/.test(char)) {
            return String.fromCharCode(122 - (char.charCodeAt(0) - 97));
        }
        return char;
    }).join('');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
const themeToggle = document.getElementById('themeToggle');
const body = document.body;

if (localStorage.getItem('theme') === 'dark') {
    body.setAttribute('data-theme', 'dark');
    themeToggle.textContent = 'üåû –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
}

themeToggle.addEventListener('click', () => {
    if (body.getAttribute('data-theme') === 'dark') {
        body.removeAttribute('data-theme');
        localStorage.setItem('theme', 'light');
        themeToggle.textContent = 'üåì –¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
    } else {
        body.setAttribute('data-theme', 'dark');
        localStorage.setItem('theme', 'dark');
        themeToggle.textContent = 'üåû –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∏—Ñ—Ä–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.getElementById('cipherType').dispatchEvent(new Event('change'));